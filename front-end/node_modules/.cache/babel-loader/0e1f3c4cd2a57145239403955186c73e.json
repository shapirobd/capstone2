{"ast":null,"code":"import axios from \"axios\";\nimport { LOGIN, LOGOUT } from \"../components/actionTypes\";\nconst API_URL = \"http://localhost:5000\"; // adds user to database as well as redux state\n// by dispatching action created by registered()\n\nexport const register = data => {\n  return async dispatch => {\n    try {\n      console.log(\"1. ACTION CREATOR\");\n      const resp = await axios.post(`${API_URL}/auth/register`, data); // const userResp = await axios.get(`${API_URL}/users/${data.username}`);\n\n      const {\n        user,\n        token\n      } = resp.data;\n      dispatch(registered(token, user));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n}; // returns action to be dispatched containing information on the\n// newly registered user\n\nconst registered = (token, user) => {\n  return {\n    type: LOGIN,\n    payload: {\n      user,\n      token\n    }\n  };\n}; // verifies that username & password from data are valid\n// if valid, adds the user to redux state by dispatching action created by loggedIn()\n// in invalid, throws error\n\n\nexport const login = data => {\n  return async dispatch => {\n    try {\n      const resp = await axios.post(`${API_URL}/auth/login`, data);\n      const {\n        user,\n        token\n      } = resp.data;\n      dispatch(loggedIn(token, user));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n}; // returns action to be dispatched containing information on the\n// logged in user\n\nconst loggedIn = (token, user) => {\n  return {\n    type: LOGIN,\n    payload: {\n      user,\n      token\n    }\n  };\n}; // returns action to be dispatched that ends up removing\n// the user's information from redux state\n\n\nexport const logout = () => {\n  return {\n    type: LOGOUT\n  };\n}; // edits the information on a given user in the database\n// as well as redux state by dispatching action created by edittedProfile()\n\nexport const editProfile = (username, data) => {\n  return async dispatch => {\n    try {\n      const editResp = await axios.patch(`${API_URL}/users/${username}`, data);\n      dispatch(edittedProfile(editResp.data));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n}; // returns action to be dispatched containing information on the\n// logged in user\n\nconst edittedProfile = user => {\n  return {\n    type: \"EDIT_PROFILE\",\n    payload: {\n      user\n    }\n  };\n};","map":{"version":3,"sources":["/Users/briand.shapiro/Desktop/Springboard/capstone2/front-end/src/actionCreators/userActionCreators.js"],"names":["axios","LOGIN","LOGOUT","API_URL","register","data","dispatch","console","log","resp","post","user","token","registered","e","error","type","payload","login","loggedIn","logout","editProfile","username","editResp","patch","edittedProfile"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,2BAA9B;AAEA,MAAMC,OAAO,GAAG,uBAAhB,C,CAEA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAIC,IAAD,IAAU;AACjC,SAAO,MAAOC,QAAP,IAAoB;AAC1B,QAAI;AACHC,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,YAAMC,IAAI,GAAG,MAAMT,KAAK,CAACU,IAAN,CAAY,GAAEP,OAAQ,gBAAtB,EAAuCE,IAAvC,CAAnB,CAFG,CAGH;;AACA,YAAM;AAAEM,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAI,CAACJ,IAA7B;AACAC,MAAAA,QAAQ,CAACO,UAAU,CAACD,KAAD,EAAQD,IAAR,CAAX,CAAR;AACA,KAND,CAME,OAAOG,CAAP,EAAU;AACXP,MAAAA,OAAO,CAACQ,KAAR,CAAcD,CAAd;AACA;AACD,GAVD;AAWA,CAZM,C,CAcP;AACA;;AACA,MAAMD,UAAU,GAAG,CAACD,KAAD,EAAQD,IAAR,KAAiB;AACnC,SAAO;AACNK,IAAAA,IAAI,EAAEf,KADA;AAENgB,IAAAA,OAAO,EAAE;AACRN,MAAAA,IADQ;AAERC,MAAAA;AAFQ;AAFH,GAAP;AAOA,CARD,C,CAUA;AACA;AACA;;;AACA,OAAO,MAAMM,KAAK,GAAIb,IAAD,IAAU;AAC9B,SAAO,MAAOC,QAAP,IAAoB;AAC1B,QAAI;AACH,YAAMG,IAAI,GAAG,MAAMT,KAAK,CAACU,IAAN,CAAY,GAAEP,OAAQ,aAAtB,EAAoCE,IAApC,CAAnB;AACA,YAAM;AAAEM,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAI,CAACJ,IAA7B;AACAC,MAAAA,QAAQ,CAACa,QAAQ,CAACP,KAAD,EAAQD,IAAR,CAAT,CAAR;AACA,KAJD,CAIE,OAAOG,CAAP,EAAU;AACXP,MAAAA,OAAO,CAACQ,KAAR,CAAcD,CAAd;AACA;AACD,GARD;AASA,CAVM,C,CAYP;AACA;;AACA,MAAMK,QAAQ,GAAG,CAACP,KAAD,EAAQD,IAAR,KAAiB;AACjC,SAAO;AACNK,IAAAA,IAAI,EAAEf,KADA;AAENgB,IAAAA,OAAO,EAAE;AACRN,MAAAA,IADQ;AAERC,MAAAA;AAFQ;AAFH,GAAP;AAOA,CARD,C,CAUA;AACA;;;AACA,OAAO,MAAMQ,MAAM,GAAG,MAAM;AAC3B,SAAO;AACNJ,IAAAA,IAAI,EAAEd;AADA,GAAP;AAGA,CAJM,C,CAMP;AACA;;AACA,OAAO,MAAMmB,WAAW,GAAG,CAACC,QAAD,EAAWjB,IAAX,KAAoB;AAC9C,SAAO,MAAOC,QAAP,IAAoB;AAC1B,QAAI;AACH,YAAMiB,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,KAAN,CAAa,GAAErB,OAAQ,UAASmB,QAAS,EAAzC,EAA4CjB,IAA5C,CAAvB;AACAC,MAAAA,QAAQ,CAACmB,cAAc,CAACF,QAAQ,CAAClB,IAAV,CAAf,CAAR;AACA,KAHD,CAGE,OAAOS,CAAP,EAAU;AACXP,MAAAA,OAAO,CAACQ,KAAR,CAAcD,CAAd;AACA;AACD,GAPD;AAQA,CATM,C,CAWP;AACA;;AACA,MAAMW,cAAc,GAAId,IAAD,IAAU;AAChC,SAAO;AACNK,IAAAA,IAAI,EAAE,cADA;AAENC,IAAAA,OAAO,EAAE;AAAEN,MAAAA;AAAF;AAFH,GAAP;AAIA,CALD","sourcesContent":["import axios from \"axios\";\nimport { LOGIN, LOGOUT } from \"../components/actionTypes\";\n\nconst API_URL = \"http://localhost:5000\";\n\n// adds user to database as well as redux state\n// by dispatching action created by registered()\nexport const register = (data) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tconsole.log(\"1. ACTION CREATOR\");\n\t\t\tconst resp = await axios.post(`${API_URL}/auth/register`, data);\n\t\t\t// const userResp = await axios.get(`${API_URL}/users/${data.username}`);\n\t\t\tconst { user, token } = resp.data;\n\t\t\tdispatch(registered(token, user));\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t};\n};\n\n// returns action to be dispatched containing information on the\n// newly registered user\nconst registered = (token, user) => {\n\treturn {\n\t\ttype: LOGIN,\n\t\tpayload: {\n\t\t\tuser,\n\t\t\ttoken,\n\t\t},\n\t};\n};\n\n// verifies that username & password from data are valid\n// if valid, adds the user to redux state by dispatching action created by loggedIn()\n// in invalid, throws error\nexport const login = (data) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tconst resp = await axios.post(`${API_URL}/auth/login`, data);\n\t\t\tconst { user, token } = resp.data;\n\t\t\tdispatch(loggedIn(token, user));\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t};\n};\n\n// returns action to be dispatched containing information on the\n// logged in user\nconst loggedIn = (token, user) => {\n\treturn {\n\t\ttype: LOGIN,\n\t\tpayload: {\n\t\t\tuser,\n\t\t\ttoken,\n\t\t},\n\t};\n};\n\n// returns action to be dispatched that ends up removing\n// the user's information from redux state\nexport const logout = () => {\n\treturn {\n\t\ttype: LOGOUT,\n\t};\n};\n\n// edits the information on a given user in the database\n// as well as redux state by dispatching action created by edittedProfile()\nexport const editProfile = (username, data) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tconst editResp = await axios.patch(`${API_URL}/users/${username}`, data);\n\t\t\tdispatch(edittedProfile(editResp.data));\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t};\n};\n\n// returns action to be dispatched containing information on the\n// logged in user\nconst edittedProfile = (user) => {\n\treturn {\n\t\ttype: \"EDIT_PROFILE\",\n\t\tpayload: { user },\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}