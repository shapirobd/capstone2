{"ast":null,"code":"import axios from \"axios\";\nimport { LOAD_FEED, LOAD_RECIPE, FILTER_FEED } from \"../components/actionTypes\";\nimport createMacrosParams from \"../helpers/createMacrosParams\"; // retrieves all recipes from spoonacular API (paginated 40 per page) and updates\n// the feed & page number in redux state by dispatching array of recipes and the page number\n\nexport const loadFeed = (page = 1, filterData = {\n  diets: [],\n  macros: {}\n}) => {\n  return async dispatch => {\n    try {\n      const {\n        diets,\n        macros,\n        recipeName\n      } = filterData;\n      const macrosParams = createMacrosParams(macros);\n      const dietsParams = diets.join(\",\");\n      const recipes = await axios.get(\"https://api.spoonacular.com/recipes/complexSearch\", {\n        params: {\n          apiKey: \"73baf9bb95a14f5fb4d71e2f12ab8479\",\n          offset: 40 * (page - 1),\n          number: 40,\n          diet: dietsParams,\n          ...macrosParams,\n          query: recipeName\n        }\n      });\n      console.log(recipes.data);\n      dispatch(loadedFeed(recipes.data, page));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n}; // returns action containing recipes to include in redux state's feed,\n// total number of results found to set as redux state's totalResults,\n// and the current page number to set as redux state's page\n\nconst loadedFeed = (data, page) => {\n  return {\n    type: LOAD_FEED,\n    payload: {\n      recipes: data.results,\n      totalResults: data.totalResults <= 900 ? data.totalResults : 900,\n      page\n    }\n  };\n}; // retrieves data on a single recipe from spoonacular API and updates\n// currentRecipe in redux state by dispatching recipe info & instructions info\n\n\nexport const loadRecipe = recipeId => {\n  console.log(\"2: \", recipeId);\n  return async dispatch => {\n    try {\n      const recipe = await axios.get(`https://api.spoonacular.com/recipes/${recipeId}/information`, {\n        params: {\n          apiKey: \"73baf9bb95a14f5fb4d71e2f12ab8479\",\n          includeNutrition: true\n        }\n      });\n      const instructions = await axios.get(`https://api.spoonacular.com/recipes/${recipeId}/analyzedInstructions`, {\n        params: {\n          apiKey: \"73baf9bb95a14f5fb4d71e2f12ab8479\",\n          stepBreakdown: true\n        }\n      });\n      dispatch(loadedRecipe(recipe.data, instructions.data[0]));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n}; // returns action containing information to include in redux state's currentRecipe\n\nconst loadedRecipe = (recipe, instructions) => {\n  return {\n    type: LOAD_RECIPE,\n    payload: {\n      currentRecipe: {\n        recipe,\n        instructions\n      }\n    }\n  };\n};\n\nexport const getRecipesByIngredients = ingredients => {\n  return async dispatch => {\n    try {\n      const ingredientsParams = ingredients.join(\",\");\n      const recipes = await axios.get(\"https://api.spoonacular.com/recipes/findByIngredients\", {\n        params: {\n          apiKey: \"73baf9bb95a14f5fb4d71e2f12ab8479\",\n          offset: 0,\n          number: 6900,\n          ingredients: ingredientsParams\n        }\n      });\n      dispatch(filteredFeed({\n        results: recipes.data,\n        totalResults: recipes.length\n      }));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n}; // export const getRecipesByKeywords = (keywords) => {\n// \treturn async (dispatch) => {\n// \t\ttry {\n// \t\t\tconst ingredientsParams = ingredients.join(\",\");\n// \t\t\tconst recipes = await axios.get(\n// \t\t\t\t\"https://api.spoonacular.com/recipes/findByIngredients\",\n// \t\t\t\t{\n// \t\t\t\t\tparams: {\n// \t\t\t\t\t\tapiKey: \"73baf9bb95a14f5fb4d71e2f12ab8479\",\n// \t\t\t\t\t\toffset: 0,\n// \t\t\t\t\t\tnumber: 6900,\n// \t\t\t\t\t\tquery: keywords,\n// \t\t\t\t\t},\n// \t\t\t\t}\n// \t\t\t);\n// \t\t\tdispatch(\n// \t\t\t\tfilteredFeed({ results: recipes.data, totalResults: recipes.length })\n// \t\t\t);\n// \t\t} catch (e) {\n// \t\t\tconsole.error(e);\n// \t\t}\n// \t};\n// };\n// const gotRecipesByIngredients = (results) => {\n// \treturn {\n// \t\ttype: FILTER_BY_INGREDIENTS,\n// \t\tpayload: { recipes: data.results, totalResults: data.totalResults },\n// \t};\n// };\n// export const filterFeed = (filterData, page = 1) => {\n// \treturn async (dispatch) => {\n// \t\ttry {\n// \t\t\tconst { diets, macros, recipeName } = filterData;\n// \t\t\tconst macrosParams = createMacrosParams(macros);\n// \t\t\tconst dietsParams = diets.join(\",\");\n// \t\t\tconst recipes = await axios.get(\n// \t\t\t\t\"https://api.spoonacular.com/recipes/complexSearch\",\n// \t\t\t\t{\n// \t\t\t\t\tparams: {\n// \t\t\t\t\t\tapiKey: \"73baf9bb95a14f5fb4d71e2f12ab8479\",\n// \t\t\t\t\t\toffset: 40 * (page - 1),\n// \t\t\t\t\t\tnumber: 40,\n// \t\t\t\t\t\tdiet: dietsParams,\n// \t\t\t\t\t\t...macrosParams,\n// \t\t\t\t\t\tquery: recipeName,\n// \t\t\t\t\t},\n// \t\t\t\t}\n// \t\t\t);\n// \t\t\tconsole.log(recipes.data);\n// \t\t\tdispatch(filteredFeed(recipes.data, page));\n// \t\t} catch (e) {\n// \t\t\tconsole.error(e);\n// \t\t}\n// \t};\n// };\n\nconst filteredFeed = (data, page) => {\n  return {\n    type: FILTER_FEED,\n    payload: {\n      recipes: data.results,\n      totalResults: data.totalResults,\n      page\n    }\n  };\n};","map":{"version":3,"sources":["/Users/briand.shapiro/Desktop/Springboard/capstone2/front-end/src/actionCreators/recipeActionCreators.js"],"names":["axios","LOAD_FEED","LOAD_RECIPE","FILTER_FEED","createMacrosParams","loadFeed","page","filterData","diets","macros","dispatch","recipeName","macrosParams","dietsParams","join","recipes","get","params","apiKey","offset","number","diet","query","console","log","data","loadedFeed","e","error","type","payload","results","totalResults","loadRecipe","recipeId","recipe","includeNutrition","instructions","stepBreakdown","loadedRecipe","currentRecipe","getRecipesByIngredients","ingredients","ingredientsParams","filteredFeed","length"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { LOAD_FEED, LOAD_RECIPE, FILTER_FEED } from \"../components/actionTypes\";\nimport createMacrosParams from \"../helpers/createMacrosParams\";\n\n// retrieves all recipes from spoonacular API (paginated 40 per page) and updates\n// the feed & page number in redux state by dispatching array of recipes and the page number\nexport const loadFeed = (page = 1, filterData = { diets: [], macros: {} }) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tconst { diets, macros, recipeName } = filterData;\n\t\t\tconst macrosParams = createMacrosParams(macros);\n\t\t\tconst dietsParams = diets.join(\",\");\n\t\t\tconst recipes = await axios.get(\n\t\t\t\t\"https://api.spoonacular.com/recipes/complexSearch\",\n\t\t\t\t{\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tapiKey: \"73baf9bb95a14f5fb4d71e2f12ab8479\",\n\t\t\t\t\t\toffset: 40 * (page - 1),\n\t\t\t\t\t\tnumber: 40,\n\t\t\t\t\t\tdiet: dietsParams,\n\t\t\t\t\t\t...macrosParams,\n\t\t\t\t\t\tquery: recipeName,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t);\n\t\t\tconsole.log(recipes.data);\n\t\t\tdispatch(loadedFeed(recipes.data, page));\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t};\n};\n\n// returns action containing recipes to include in redux state's feed,\n// total number of results found to set as redux state's totalResults,\n// and the current page number to set as redux state's page\nconst loadedFeed = (data, page) => {\n\treturn {\n\t\ttype: LOAD_FEED,\n\t\tpayload: {\n\t\t\trecipes: data.results,\n\t\t\ttotalResults: data.totalResults <= 900 ? data.totalResults : 900,\n\t\t\tpage,\n\t\t},\n\t};\n};\n\n// retrieves data on a single recipe from spoonacular API and updates\n// currentRecipe in redux state by dispatching recipe info & instructions info\nexport const loadRecipe = (recipeId) => {\n\tconsole.log(\"2: \", recipeId);\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tconst recipe = await axios.get(\n\t\t\t\t`https://api.spoonacular.com/recipes/${recipeId}/information`,\n\t\t\t\t{\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tapiKey: \"73baf9bb95a14f5fb4d71e2f12ab8479\",\n\t\t\t\t\t\tincludeNutrition: true,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t);\n\t\t\tconst instructions = await axios.get(\n\t\t\t\t`https://api.spoonacular.com/recipes/${recipeId}/analyzedInstructions`,\n\t\t\t\t{\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tapiKey: \"73baf9bb95a14f5fb4d71e2f12ab8479\",\n\t\t\t\t\t\tstepBreakdown: true,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t);\n\t\t\tdispatch(loadedRecipe(recipe.data, instructions.data[0]));\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t};\n};\n\n// returns action containing information to include in redux state's currentRecipe\nconst loadedRecipe = (recipe, instructions) => {\n\treturn {\n\t\ttype: LOAD_RECIPE,\n\t\tpayload: { currentRecipe: { recipe, instructions } },\n\t};\n};\n\nexport const getRecipesByIngredients = (ingredients) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tconst ingredientsParams = ingredients.join(\",\");\n\t\t\tconst recipes = await axios.get(\n\t\t\t\t\"https://api.spoonacular.com/recipes/findByIngredients\",\n\t\t\t\t{\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tapiKey: \"73baf9bb95a14f5fb4d71e2f12ab8479\",\n\t\t\t\t\t\toffset: 0,\n\t\t\t\t\t\tnumber: 6900,\n\t\t\t\t\t\tingredients: ingredientsParams,\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t);\n\t\t\tdispatch(\n\t\t\t\tfilteredFeed({ results: recipes.data, totalResults: recipes.length })\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t};\n};\n\n// export const getRecipesByKeywords = (keywords) => {\n// \treturn async (dispatch) => {\n// \t\ttry {\n// \t\t\tconst ingredientsParams = ingredients.join(\",\");\n// \t\t\tconst recipes = await axios.get(\n// \t\t\t\t\"https://api.spoonacular.com/recipes/findByIngredients\",\n// \t\t\t\t{\n// \t\t\t\t\tparams: {\n// \t\t\t\t\t\tapiKey: \"73baf9bb95a14f5fb4d71e2f12ab8479\",\n// \t\t\t\t\t\toffset: 0,\n// \t\t\t\t\t\tnumber: 6900,\n// \t\t\t\t\t\tquery: keywords,\n// \t\t\t\t\t},\n// \t\t\t\t}\n// \t\t\t);\n// \t\t\tdispatch(\n// \t\t\t\tfilteredFeed({ results: recipes.data, totalResults: recipes.length })\n// \t\t\t);\n// \t\t} catch (e) {\n// \t\t\tconsole.error(e);\n// \t\t}\n// \t};\n// };\n\n// const gotRecipesByIngredients = (results) => {\n// \treturn {\n// \t\ttype: FILTER_BY_INGREDIENTS,\n// \t\tpayload: { recipes: data.results, totalResults: data.totalResults },\n// \t};\n// };\n\n// export const filterFeed = (filterData, page = 1) => {\n// \treturn async (dispatch) => {\n// \t\ttry {\n// \t\t\tconst { diets, macros, recipeName } = filterData;\n// \t\t\tconst macrosParams = createMacrosParams(macros);\n// \t\t\tconst dietsParams = diets.join(\",\");\n// \t\t\tconst recipes = await axios.get(\n// \t\t\t\t\"https://api.spoonacular.com/recipes/complexSearch\",\n// \t\t\t\t{\n// \t\t\t\t\tparams: {\n// \t\t\t\t\t\tapiKey: \"73baf9bb95a14f5fb4d71e2f12ab8479\",\n// \t\t\t\t\t\toffset: 40 * (page - 1),\n// \t\t\t\t\t\tnumber: 40,\n// \t\t\t\t\t\tdiet: dietsParams,\n// \t\t\t\t\t\t...macrosParams,\n// \t\t\t\t\t\tquery: recipeName,\n// \t\t\t\t\t},\n// \t\t\t\t}\n// \t\t\t);\n// \t\t\tconsole.log(recipes.data);\n// \t\t\tdispatch(filteredFeed(recipes.data, page));\n// \t\t} catch (e) {\n// \t\t\tconsole.error(e);\n// \t\t}\n// \t};\n// };\n\nconst filteredFeed = (data, page) => {\n\treturn {\n\t\ttype: FILTER_FEED,\n\t\tpayload: { recipes: data.results, totalResults: data.totalResults, page },\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}