{"ast":null,"code":"import axios from \"axios\";\nimport { LOGIN, LOGOUT } from \"../components/actionTypes\";\nconst API_URL = \"http://localhost:5000\";\nexport const register = data => {\n  return async dispatch => {\n    try {\n      console.log(\"2:\", data);\n      const registerResp = await axios.post(`${API_URL}/auth/register`, data);\n      console.log(registerResp);\n      const {\n        token\n      } = registerResp.data;\n      const userResp = await axios.get(`${API_URL}/users/${data.username}`);\n      console.log(\"7:\", userResp.data);\n      dispatch(registered(token, userResp.data));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n};\n\nconst registered = (token, user) => {\n  const {\n    username,\n    email,\n    first_name,\n    last_name,\n    api_hash,\n    api_username\n  } = user;\n  return {\n    type: LOGIN,\n    payload: {\n      token,\n      user: {\n        username,\n        email,\n        first_name,\n        last_name,\n        api_hash,\n        api_username\n      }\n    }\n  };\n};\n\nexport const login = data => {\n  return async dispatch => {\n    try {\n      const loginResp = await axios.post(`${API_URL}/auth/login`, data);\n      const {\n        token\n      } = loginResp.data;\n      const userResp = await axios.get(`${API_URL}/users/${data.username}`);\n      dispatch(loggedIn(token, userResp.data));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n};\n\nconst loggedIn = (token, user) => {\n  const {\n    username,\n    email,\n    first_name,\n    last_name,\n    api_hash\n  } = user;\n  return {\n    type: LOGIN,\n    payload: {\n      token,\n      user: {\n        username,\n        email,\n        first_name,\n        last_name,\n        api_hash\n      }\n    }\n  };\n};\n\nexport const logout = () => {\n  return {\n    type: LOGOUT\n  };\n};","map":{"version":3,"sources":["/Users/briand.shapiro/Desktop/Springboard/capstone2/front-end/src/actionCreators/userActionCreators.js"],"names":["axios","LOGIN","LOGOUT","API_URL","register","data","dispatch","console","log","registerResp","post","token","userResp","get","username","registered","e","error","user","email","first_name","last_name","api_hash","api_username","type","payload","login","loginResp","loggedIn","logout"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { LOGIN, LOGOUT } from \"../components/actionTypes\";\n\nconst API_URL = \"http://localhost:5000\";\n\nexport const register = (data) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tconsole.log(\"2:\", data);\n\t\t\tconst registerResp = await axios.post(`${API_URL}/auth/register`, data);\n\t\t\tconsole.log(registerResp);\n\t\t\tconst { token } = registerResp.data;\n\t\t\tconst userResp = await axios.get(`${API_URL}/users/${data.username}`);\n\t\t\tconsole.log(\"7:\", userResp.data);\n\t\t\tdispatch(registered(token, userResp.data));\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t};\n};\n\nconst registered = (token, user) => {\n\tconst {\n\t\tusername,\n\t\temail,\n\t\tfirst_name,\n\t\tlast_name,\n\t\tapi_hash,\n\t\tapi_username,\n\t} = user;\n\treturn {\n\t\ttype: LOGIN,\n\t\tpayload: {\n\t\t\ttoken,\n\t\t\tuser: {\n\t\t\t\tusername,\n\t\t\t\temail,\n\t\t\t\tfirst_name,\n\t\t\t\tlast_name,\n\t\t\t\tapi_hash,\n\t\t\t\tapi_username,\n\t\t\t},\n\t\t},\n\t};\n};\n\nexport const login = (data) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tconst loginResp = await axios.post(`${API_URL}/auth/login`, data);\n\t\t\tconst { token } = loginResp.data;\n\t\t\tconst userResp = await axios.get(`${API_URL}/users/${data.username}`);\n\t\t\tdispatch(loggedIn(token, userResp.data));\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t};\n};\n\nconst loggedIn = (token, user) => {\n\tconst { username, email, first_name, last_name, api_hash } = user;\n\treturn {\n\t\ttype: LOGIN,\n\t\tpayload: {\n\t\t\ttoken,\n\t\t\tuser: {\n\t\t\t\tusername,\n\t\t\t\temail,\n\t\t\t\tfirst_name,\n\t\t\t\tlast_name,\n\t\t\t\tapi_hash,\n\t\t\t},\n\t\t},\n\t};\n};\n\nexport const logout = () => {\n\treturn {\n\t\ttype: LOGOUT,\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}