{"ast":null,"code":"import axios from \"axios\";\nimport { LOGIN } from \"../actionTypes\";\nconst API_URL = \"http://localhost:5000\";\nexport const login = data => {\n  return async dispatch => {\n    try {\n      const resp = await axios.post(`${API_URL}/login`, data);\n      const {\n        token\n      } = resp.data;\n      dispatch(loggedIn(token, data));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n};\n\nconst loggedIn = (token, user) => {\n  const {\n    username\n  } = user;\n  return {\n    type: LOGIN,\n    payload: {\n      token,\n      user: {\n        username,\n        email,\n        first_name,\n        last_name\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/briand.shapiro/Desktop/Springboard/capstone2/front-end/src/actionCreators/userActionCreators.js"],"names":["axios","LOGIN","API_URL","login","data","dispatch","resp","post","token","loggedIn","e","console","error","user","username","type","payload","email","first_name","last_name"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,MAAMC,OAAO,GAAG,uBAAhB;AAEA,OAAO,MAAMC,KAAK,GAAIC,IAAD,IAAU;AAC9B,SAAO,MAAOC,QAAP,IAAoB;AAC1B,QAAI;AACH,YAAMC,IAAI,GAAG,MAAMN,KAAK,CAACO,IAAN,CAAY,GAAEL,OAAQ,QAAtB,EAA+BE,IAA/B,CAAnB;AACA,YAAM;AAAEI,QAAAA;AAAF,UAAYF,IAAI,CAACF,IAAvB;AACAC,MAAAA,QAAQ,CAACI,QAAQ,CAACD,KAAD,EAAQJ,IAAR,CAAT,CAAR;AACA,KAJD,CAIE,OAAOM,CAAP,EAAU;AACXC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA;AACD,GARD;AASA,CAVM;;AAYP,MAAMD,QAAQ,GAAG,CAACD,KAAD,EAAQK,IAAR,KAAiB;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAeD,IAArB;AACA,SAAO;AACNE,IAAAA,IAAI,EAAEd,KADA;AAENe,IAAAA,OAAO,EAAE;AACRR,MAAAA,KADQ;AAERK,MAAAA,IAAI,EAAE;AACLC,QAAAA,QADK;AAELG,QAAAA,KAFK;AAGLC,QAAAA,UAHK;AAILC,QAAAA;AAJK;AAFE;AAFH,GAAP;AAYA,CAdD","sourcesContent":["import axios from \"axios\";\nimport { LOGIN } from \"../actionTypes\";\n\nconst API_URL = \"http://localhost:5000\";\n\nexport const login = (data) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tconst resp = await axios.post(`${API_URL}/login`, data);\n\t\t\tconst { token } = resp.data;\n\t\t\tdispatch(loggedIn(token, data));\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t};\n};\n\nconst loggedIn = (token, user) => {\n\tconst { username } = user;\n\treturn {\n\t\ttype: LOGIN,\n\t\tpayload: {\n\t\t\ttoken,\n\t\t\tuser: {\n\t\t\t\tusername,\n\t\t\t\temail,\n\t\t\t\tfirst_name,\n\t\t\t\tlast_name,\n\t\t\t},\n\t\t},\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}