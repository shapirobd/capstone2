{"ast":null,"code":"import axios from \"axios\";\nexport const getPieChartData = (carbs = 0, fat = 0, protein = 0) => {\n  const totalCals = carbs * 4 + fat * 9 + protein * 4;\n  const percentages = {\n    carbs: Math.round(carbs * 400 / totalCals),\n    fat: Math.round(fat * 900 / totalCals),\n    protein: Math.round(protein * 400 / totalCals)\n  };\n  return {\n    labels: [`Carbohydraetes (${percentages.carbs}%)`, `Fat (${percentages.fat}%)`, `Protein (${percentages.protein}%)`],\n    datasets: [{\n      data: [carbs, fat, protein],\n      backgroundColor: [\"#f44336\", \"#4caf50\", \"#2196f3\"],\n      hoverBackgroundColor: [\"#f44336\", \"#4caf50\", \"#2196f3\"],\n      hoverBorderColor: [\"#f44336\", \"#4caf50\", \"#2196f3\"],\n      borderAlign: \"inner\"\n    }]\n  };\n};\nexport const getDateMacros = async (user, context, date, setDayState) => {\n  const meals = user.eatenMeals[date] || [];\n  const fat = getTotalMacro(\"fat\", meals);\n  const carbs = getTotalMacro(\"carbs\", meals);\n  const protein = getTotalMacro(\"protein\", meals);\n  let empty = true;\n\n  if (meals.length) {\n    empty = false;\n  }\n\n  let macros = {\n    fat,\n    carbs,\n    protein\n  };\n\n  if (context === \"day\") {\n    setDayState({\n      loaded: true,\n      empty,\n      date,\n      macros\n    });\n  } else {\n    return macros;\n  }\n};\n\nconst getTotalMacro = (macro, meals) => {\n  return meals.reduce((total, meal) => {\n    return total + meal[macro];\n  }, 0);\n};","map":{"version":3,"sources":["/Users/briand.shapiro/Desktop/Springboard/capstone2/front-end/src/components/tracker/helpers/dailyHelpers.js"],"names":["axios","getPieChartData","carbs","fat","protein","totalCals","percentages","Math","round","labels","datasets","data","backgroundColor","hoverBackgroundColor","hoverBorderColor","borderAlign","getDateMacros","user","context","date","setDayState","meals","eatenMeals","getTotalMacro","empty","length","macros","loaded","macro","reduce","total","meal"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAG,CAAT,EAAYC,GAAG,GAAG,CAAlB,EAAqBC,OAAO,GAAG,CAA/B,KAAqC;AACnE,QAAMC,SAAS,GAAGH,KAAK,GAAG,CAAR,GAAYC,GAAG,GAAG,CAAlB,GAAsBC,OAAO,GAAG,CAAlD;AACA,QAAME,WAAW,GAAG;AACnBJ,IAAAA,KAAK,EAAEK,IAAI,CAACC,KAAL,CAAYN,KAAK,GAAG,GAAT,GAAgBG,SAA3B,CADY;AAEnBF,IAAAA,GAAG,EAAEI,IAAI,CAACC,KAAL,CAAYL,GAAG,GAAG,GAAP,GAAcE,SAAzB,CAFc;AAGnBD,IAAAA,OAAO,EAAEG,IAAI,CAACC,KAAL,CAAYJ,OAAO,GAAG,GAAX,GAAkBC,SAA7B;AAHU,GAApB;AAKA,SAAO;AACNI,IAAAA,MAAM,EAAE,CACN,mBAAkBH,WAAW,CAACJ,KAAM,IAD9B,EAEN,QAAOI,WAAW,CAACH,GAAI,IAFjB,EAGN,YAAWG,WAAW,CAACF,OAAQ,IAHzB,CADF;AAMNM,IAAAA,QAAQ,EAAE,CACT;AACCC,MAAAA,IAAI,EAAE,CAACT,KAAD,EAAQC,GAAR,EAAaC,OAAb,CADP;AAECQ,MAAAA,eAAe,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,CAFlB;AAGCC,MAAAA,oBAAoB,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,CAHvB;AAICC,MAAAA,gBAAgB,EAAE,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,CAJnB;AAKCC,MAAAA,WAAW,EAAE;AALd,KADS;AANJ,GAAP;AAgBA,CAvBM;AAyBP,OAAO,MAAMC,aAAa,GAAG,OAAOC,IAAP,EAAaC,OAAb,EAAsBC,IAAtB,EAA4BC,WAA5B,KAA4C;AACxE,QAAMC,KAAK,GAAGJ,IAAI,CAACK,UAAL,CAAgBH,IAAhB,KAAyB,EAAvC;AAEA,QAAMhB,GAAG,GAAGoB,aAAa,CAAC,KAAD,EAAQF,KAAR,CAAzB;AACA,QAAMnB,KAAK,GAAGqB,aAAa,CAAC,OAAD,EAAUF,KAAV,CAA3B;AACA,QAAMjB,OAAO,GAAGmB,aAAa,CAAC,SAAD,EAAYF,KAAZ,CAA7B;AAEA,MAAIG,KAAK,GAAG,IAAZ;;AACA,MAAIH,KAAK,CAACI,MAAV,EAAkB;AACjBD,IAAAA,KAAK,GAAG,KAAR;AACA;;AACD,MAAIE,MAAM,GAAG;AAAEvB,IAAAA,GAAF;AAAOD,IAAAA,KAAP;AAAcE,IAAAA;AAAd,GAAb;;AAEA,MAAIc,OAAO,KAAK,KAAhB,EAAuB;AACtBE,IAAAA,WAAW,CAAC;AACXO,MAAAA,MAAM,EAAE,IADG;AAEXH,MAAAA,KAFW;AAGXL,MAAAA,IAHW;AAIXO,MAAAA;AAJW,KAAD,CAAX;AAMA,GAPD,MAOO;AACN,WAAOA,MAAP;AACA;AACD,CAvBM;;AAyBP,MAAMH,aAAa,GAAG,CAACK,KAAD,EAAQP,KAAR,KAAkB;AACvC,SAAOA,KAAK,CAACQ,MAAN,CAAa,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACpC,WAAOD,KAAK,GAAGC,IAAI,CAACH,KAAD,CAAnB;AACA,GAFM,EAEJ,CAFI,CAAP;AAGA,CAJD","sourcesContent":["import axios from \"axios\";\n\nexport const getPieChartData = (carbs = 0, fat = 0, protein = 0) => {\n\tconst totalCals = carbs * 4 + fat * 9 + protein * 4;\n\tconst percentages = {\n\t\tcarbs: Math.round((carbs * 400) / totalCals),\n\t\tfat: Math.round((fat * 900) / totalCals),\n\t\tprotein: Math.round((protein * 400) / totalCals),\n\t};\n\treturn {\n\t\tlabels: [\n\t\t\t`Carbohydraetes (${percentages.carbs}%)`,\n\t\t\t`Fat (${percentages.fat}%)`,\n\t\t\t`Protein (${percentages.protein}%)`,\n\t\t],\n\t\tdatasets: [\n\t\t\t{\n\t\t\t\tdata: [carbs, fat, protein],\n\t\t\t\tbackgroundColor: [\"#f44336\", \"#4caf50\", \"#2196f3\"],\n\t\t\t\thoverBackgroundColor: [\"#f44336\", \"#4caf50\", \"#2196f3\"],\n\t\t\t\thoverBorderColor: [\"#f44336\", \"#4caf50\", \"#2196f3\"],\n\t\t\t\tborderAlign: \"inner\",\n\t\t\t},\n\t\t],\n\t};\n};\n\nexport const getDateMacros = async (user, context, date, setDayState) => {\n\tconst meals = user.eatenMeals[date] || [];\n\n\tconst fat = getTotalMacro(\"fat\", meals);\n\tconst carbs = getTotalMacro(\"carbs\", meals);\n\tconst protein = getTotalMacro(\"protein\", meals);\n\n\tlet empty = true;\n\tif (meals.length) {\n\t\tempty = false;\n\t}\n\tlet macros = { fat, carbs, protein };\n\n\tif (context === \"day\") {\n\t\tsetDayState({\n\t\t\tloaded: true,\n\t\t\tempty,\n\t\t\tdate,\n\t\t\tmacros,\n\t\t});\n\t} else {\n\t\treturn macros;\n\t}\n};\n\nconst getTotalMacro = (macro, meals) => {\n\treturn meals.reduce((total, meal) => {\n\t\treturn total + meal[macro];\n\t}, 0);\n};\n"]},"metadata":{},"sourceType":"module"}