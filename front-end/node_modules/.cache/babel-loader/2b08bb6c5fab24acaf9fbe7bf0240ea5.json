{"ast":null,"code":"import axios from \"axios\";\nexport const getPieChartData = (carbs = 0, fat = 0, protein = 0) => {\n  const totalCals = carbs * 4 + fat * 9 + protein * 4;\n  const percentages = {\n    carbs: Math.round(carbs * 400 / totalCals),\n    fat: Math.round(fat * 900 / totalCals),\n    protein: Math.round(protein * 400 / totalCals)\n  };\n  return {\n    labels: [`Carbohydraetes (${percentages.carbs}%)`, `Fat (${percentages.fat}%)`, `Protein (${percentages.protein}%)`],\n    datasets: [{\n      data: [carbs, fat, protein],\n      backgroundColor: [\"#f44336\", \"#4caf50\", \"#2196f3\"],\n      hoverBackgroundColor: [\"#f44336\", \"#4caf50\", \"#2196f3\"],\n      hoverBorderColor: [\"#f44336\", \"#4caf50\", \"#2196f3\"],\n      borderAlign: \"inner\"\n    }]\n  };\n};\nexport const getDateMacros = async (user, context, date, setDayState) => {\n  const meals = user.eatenMeals[date] || [];\n  const totalFat = getTotalMacro(\"fat\", meals);\n  const totalCarbs = getTotalMacro(\"carbs\", meals);\n  const totalProtein = getTotalMacro(\"protein\", meals);\n  let empty = true; // let meals;\n\n  if (meals.length) {\n    empty = false; // meals = await getMealsByIds(mealIds);\n  } // let macros;\n  // if (meals) {\n\n\n  let macros = {\n    fat,\n    carbs,\n    protein\n  }; // } else {\n  // \tmacros = {\n  // \t\tcarbs: 0,\n  // \t\tfat: 0,\n  // \t\tprotein: 0,\n  // \t};\n  // }\n\n  if (context === \"day\") {\n    setDayState({\n      loaded: true,\n      empty,\n      date,\n      macros\n    });\n  } else {\n    return macros;\n  }\n}; // const getMealsByIds = async (ids) => {\n// \tconst meals = await axios.get(\n// \t\t`https://api.spoonacular.com/recipes/informationBulk`,\n// \t\t{\n// \t\t\tparams: {\n// \t\t\t\tapiKey: \"73baf9bb95a14f5fb4d71e2f12ab8479\",\n// \t\t\t\tids: ids.join(\",\"),\n// \t\t\t\tincludeNutrition: true,\n// \t\t\t},\n// \t\t}\n// \t);\n// \treturn meals;\n// };\n// const getMacrosFromMeals = async (meals) => {\n// \tconst macros = {\n// \t\tcarbs: meals.data.reduce((totalCarbs, meal) => {\n// \t\t\treturn Math.round(totalCarbs + meal.nutrition.nutrients[3].amount) || 0;\n// \t\t}, 0),\n// \t\tfat: meals.data.reduce((totalFat, meal) => {\n// \t\t\treturn Math.round(totalFat + meal.nutrition.nutrients[1].amount) || 0;\n// \t\t}, 0),\n// \t\tprotein: meals.data.reduce((totalProtein, meal) => {\n// \t\t\treturn Math.round(totalProtein + meal.nutrition.nutrients[8].amount) || 0;\n// \t\t}, 0),\n// \t};\n// \treturn macros;\n// };\n\nconst getTotalMacro = (macro, meals) => {\n  return meals.reduce((total, meal) => {\n    total + val;\n  }, 0);\n};","map":{"version":3,"sources":["/Users/briand.shapiro/Desktop/Springboard/capstone2/front-end/src/components/tracker/helpers/dailyHelpers.js"],"names":["axios","getPieChartData","carbs","fat","protein","totalCals","percentages","Math","round","labels","datasets","data","backgroundColor","hoverBackgroundColor","hoverBorderColor","borderAlign","getDateMacros","user","context","date","setDayState","meals","eatenMeals","totalFat","getTotalMacro","totalCarbs","totalProtein","empty","length","macros","loaded","macro","reduce","total","meal","val"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n\nexport const getPieChartData = (carbs = 0, fat = 0, protein = 0) => {\n\tconst totalCals = carbs * 4 + fat * 9 + protein * 4;\n\tconst percentages = {\n\t\tcarbs: Math.round((carbs * 400) / totalCals),\n\t\tfat: Math.round((fat * 900) / totalCals),\n\t\tprotein: Math.round((protein * 400) / totalCals),\n\t};\n\treturn {\n\t\tlabels: [\n\t\t\t`Carbohydraetes (${percentages.carbs}%)`,\n\t\t\t`Fat (${percentages.fat}%)`,\n\t\t\t`Protein (${percentages.protein}%)`,\n\t\t],\n\t\tdatasets: [\n\t\t\t{\n\t\t\t\tdata: [carbs, fat, protein],\n\t\t\t\tbackgroundColor: [\"#f44336\", \"#4caf50\", \"#2196f3\"],\n\t\t\t\thoverBackgroundColor: [\"#f44336\", \"#4caf50\", \"#2196f3\"],\n\t\t\t\thoverBorderColor: [\"#f44336\", \"#4caf50\", \"#2196f3\"],\n\t\t\t\tborderAlign: \"inner\",\n\t\t\t},\n\t\t],\n\t};\n};\n\nexport const getDateMacros = async (user, context, date, setDayState) => {\n\tconst meals = user.eatenMeals[date] || [];\n\n\tconst totalFat = getTotalMacro(\"fat\", meals);\n\tconst totalCarbs = getTotalMacro(\"carbs\", meals);\n\tconst totalProtein = getTotalMacro(\"protein\", meals);\n\n\tlet empty = true;\n\t// let meals;\n\tif (meals.length) {\n\t\tempty = false;\n\t\t// meals = await getMealsByIds(mealIds);\n\t}\n\n\t// let macros;\n\t// if (meals) {\n\tlet macros = { fat, carbs, protein };\n\t// } else {\n\t// \tmacros = {\n\t// \t\tcarbs: 0,\n\t// \t\tfat: 0,\n\t// \t\tprotein: 0,\n\t// \t};\n\t// }\n\n\tif (context === \"day\") {\n\t\tsetDayState({\n\t\t\tloaded: true,\n\t\t\tempty,\n\t\t\tdate,\n\t\t\tmacros,\n\t\t});\n\t} else {\n\t\treturn macros;\n\t}\n};\n\n// const getMealsByIds = async (ids) => {\n// \tconst meals = await axios.get(\n// \t\t`https://api.spoonacular.com/recipes/informationBulk`,\n// \t\t{\n// \t\t\tparams: {\n// \t\t\t\tapiKey: \"73baf9bb95a14f5fb4d71e2f12ab8479\",\n// \t\t\t\tids: ids.join(\",\"),\n// \t\t\t\tincludeNutrition: true,\n// \t\t\t},\n// \t\t}\n// \t);\n// \treturn meals;\n// };\n\n// const getMacrosFromMeals = async (meals) => {\n// \tconst macros = {\n// \t\tcarbs: meals.data.reduce((totalCarbs, meal) => {\n// \t\t\treturn Math.round(totalCarbs + meal.nutrition.nutrients[3].amount) || 0;\n// \t\t}, 0),\n// \t\tfat: meals.data.reduce((totalFat, meal) => {\n// \t\t\treturn Math.round(totalFat + meal.nutrition.nutrients[1].amount) || 0;\n// \t\t}, 0),\n// \t\tprotein: meals.data.reduce((totalProtein, meal) => {\n// \t\t\treturn Math.round(totalProtein + meal.nutrition.nutrients[8].amount) || 0;\n// \t\t}, 0),\n// \t};\n// \treturn macros;\n// };\n\nconst getTotalMacro = (macro, meals) => {\n\treturn meals.reduce((total, meal) => {\n\t\ttotal + val;\n\t}, 0);\n};\n"]},"metadata":{},"sourceType":"module"}