{"ast":null,"code":"import axios from \"axios\";\nimport { LOGIN, LOGOUT } from \"../components/actionTypes\";\nconst API_URL = \"http://localhost:5000\"; // adds user to database as well as redux state\n// by dispatching action created by registered()\n\nexport const register = data => {\n  return async dispatch => {\n    try {\n      const tokenResp = await axios.post(`${API_URL}/auth/register`, data);\n      console.log(\"TOKEN RESP:\", tokenResp);\n      const userResp = await axios.get(`${API_URL}/users/${data.username}`);\n      dispatch(registered(tokenResp.data.token, userResp.data));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n}; // returns action to be dispatched containing information on the\n// newly registered user\n\nconst registered = (token, user) => {\n  return {\n    type: LOGIN,\n    payload: {\n      user,\n      token\n    }\n  };\n}; // verifies that username & password from data are valid\n// if valid, adds the user to redux state by dispatching action created by loggedIn()\n// in invalid, throws error\n\n\nexport const login = data => {\n  return async dispatch => {\n    try {\n      const user = await axios.post(`${API_URL}/auth/login`, data);\n      dispatch(loggedIn(user.data));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n}; // returns action to be dispatched containing information on the\n// logged in user\n\nconst loggedIn = user => {\n  const {\n    username,\n    email,\n    first_name,\n    last_name,\n    bookmarks,\n    eatenMeals,\n    weight,\n    weight_goal,\n    calorie_goal\n  } = user;\n  return {\n    type: LOGIN,\n    payload: {\n      user: {\n        username,\n        email,\n        first_name,\n        last_name,\n        bookmarks,\n        eatenMeals,\n        weight,\n        weight_goal,\n        calorie_goal\n      }\n    }\n  };\n}; // returns action to be dispatched that ends up removing\n// the user's information from redux state\n\n\nexport const logout = () => {\n  return {\n    type: LOGOUT\n  };\n}; // edits the information on a given user in the database\n// as well as redux state by dispatching action created by edittedProfile()\n\nexport const editProfile = (username, data) => {\n  return async dispatch => {\n    try {\n      const editResp = await axios.patch(`${API_URL}/users/${username}`, data);\n      dispatch(edittedProfile(editResp.data));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n}; // returns action to be dispatched containing information on the\n// logged in user\n\nconst edittedProfile = user => {\n  return {\n    type: \"EDIT_PROFILE\",\n    payload: {\n      user\n    }\n  };\n};","map":{"version":3,"sources":["/Users/briand.shapiro/Desktop/Springboard/capstone2/front-end/src/actionCreators/userActionCreators.js"],"names":["axios","LOGIN","LOGOUT","API_URL","register","data","dispatch","tokenResp","post","console","log","userResp","get","username","registered","token","e","error","user","type","payload","login","loggedIn","email","first_name","last_name","bookmarks","eatenMeals","weight","weight_goal","calorie_goal","logout","editProfile","editResp","patch","edittedProfile"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { LOGIN, LOGOUT } from \"../components/actionTypes\";\n\nconst API_URL = \"http://localhost:5000\";\n\n// adds user to database as well as redux state\n// by dispatching action created by registered()\nexport const register = (data) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tconst tokenResp = await axios.post(`${API_URL}/auth/register`, data);\n\t\t\tconsole.log(\"TOKEN RESP:\", tokenResp);\n\t\t\tconst userResp = await axios.get(`${API_URL}/users/${data.username}`);\n\t\t\tdispatch(registered(tokenResp.data.token, userResp.data));\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t};\n};\n\n// returns action to be dispatched containing information on the\n// newly registered user\nconst registered = (token, user) => {\n\treturn {\n\t\ttype: LOGIN,\n\t\tpayload: {\n\t\t\tuser,\n\t\t\ttoken,\n\t\t},\n\t};\n};\n\n// verifies that username & password from data are valid\n// if valid, adds the user to redux state by dispatching action created by loggedIn()\n// in invalid, throws error\nexport const login = (data) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tconst user = await axios.post(`${API_URL}/auth/login`, data);\n\t\t\tdispatch(loggedIn(user.data));\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t};\n};\n\n// returns action to be dispatched containing information on the\n// logged in user\nconst loggedIn = (user) => {\n\tconst {\n\t\tusername,\n\t\temail,\n\t\tfirst_name,\n\t\tlast_name,\n\t\tbookmarks,\n\t\teatenMeals,\n\t\tweight,\n\t\tweight_goal,\n\t\tcalorie_goal,\n\t} = user;\n\treturn {\n\t\ttype: LOGIN,\n\t\tpayload: {\n\t\t\tuser: {\n\t\t\t\tusername,\n\t\t\t\temail,\n\t\t\t\tfirst_name,\n\t\t\t\tlast_name,\n\t\t\t\tbookmarks,\n\t\t\t\teatenMeals,\n\t\t\t\tweight,\n\t\t\t\tweight_goal,\n\t\t\t\tcalorie_goal,\n\t\t\t},\n\t\t},\n\t};\n};\n\n// returns action to be dispatched that ends up removing\n// the user's information from redux state\nexport const logout = () => {\n\treturn {\n\t\ttype: LOGOUT,\n\t};\n};\n\n// edits the information on a given user in the database\n// as well as redux state by dispatching action created by edittedProfile()\nexport const editProfile = (username, data) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tconst editResp = await axios.patch(`${API_URL}/users/${username}`, data);\n\t\t\tdispatch(edittedProfile(editResp.data));\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t};\n};\n\n// returns action to be dispatched containing information on the\n// logged in user\nconst edittedProfile = (user) => {\n\treturn {\n\t\ttype: \"EDIT_PROFILE\",\n\t\tpayload: { user },\n\t};\n};\n"]},"metadata":{},"sourceType":"module"}