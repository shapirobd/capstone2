{"ast":null,"code":"import axios from \"axios\";\nimport { BOOKMARK_RECIPE, UNBOOKMARK_RECIPE } from \"../components/actionTypes\";\nconst API_URL = \"http://localhost:5000\"; // adds bookmarked recipe to database as well as redux state\n// by dispatching action created by bookmarkedRecipe()\n\nexport const bookmarkRecipe = (username, recipeId) => {\n  return async dispatch => {\n    try {\n      await axios.post(`${API_URL}/users/bookmarkRecipe`, {\n        username,\n        recipeId\n      });\n      dispatch(bookmarkedRecipe(recipeId));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n}; // returns action to be dispatched containing id of recipe to be bookmarked\n\nconst bookmarkedRecipe = recipeId => {\n  return {\n    type: BOOKMARK_RECIPE,\n    payload: {\n      recipeId\n    }\n  };\n}; // removes bookmarked recipe from database as well as redux state\n// by dispatching action created by unbookmarkedRecipe()\n\n\nexport const unbookmarkRecipe = (username, recipeId) => {\n  return async dispatch => {\n    try {\n      await axios.post(`${API_URL}/users/unbookmarkRecipe`, {\n        username,\n        recipeId\n      });\n      dispatch(unbookmarkedRecipe(recipeId));\n    } catch (e) {\n      console.error(e);\n    }\n  };\n}; // returns action to be dispatched containing id of recipe to be unbookmarked\n\nconst unbookmarkedRecipe = recipeId => {\n  return {\n    type: UNBOOKMARK_RECIPE,\n    payload: {\n      recipeId\n    }\n  };\n};\n\nexport const getAllBookmarks = async username => {\n  const bookmarks = await axios.get(`${API_URL}/users/getAllBookmarks`, {\n    params: {\n      username\n    }\n  });\n  return bookmarks;\n};","map":{"version":3,"sources":["/Users/briand.shapiro/Desktop/Springboard/capstone2/front-end/src/actionCreators/bookmarkActionCreators.js"],"names":["axios","BOOKMARK_RECIPE","UNBOOKMARK_RECIPE","API_URL","bookmarkRecipe","username","recipeId","dispatch","post","bookmarkedRecipe","e","console","error","type","payload","unbookmarkRecipe","unbookmarkedRecipe","getAllBookmarks","bookmarks","get","params"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,iBAA1B,QAAmD,2BAAnD;AAEA,MAAMC,OAAO,GAAG,uBAAhB,C,CAEA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACrD,SAAO,MAAOC,QAAP,IAAoB;AAC1B,QAAI;AACH,YAAMP,KAAK,CAACQ,IAAN,CAAY,GAAEL,OAAQ,uBAAtB,EAA8C;AACnDE,QAAAA,QADmD;AAEnDC,QAAAA;AAFmD,OAA9C,CAAN;AAIAC,MAAAA,QAAQ,CAACE,gBAAgB,CAACH,QAAD,CAAjB,CAAR;AACA,KAND,CAME,OAAOI,CAAP,EAAU;AACXC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA;AACD,GAVD;AAWA,CAZM,C,CAcP;;AACA,MAAMD,gBAAgB,GAAIH,QAAD,IAAc;AACtC,SAAO;AACNO,IAAAA,IAAI,EAAEZ,eADA;AAENa,IAAAA,OAAO,EAAE;AACRR,MAAAA;AADQ;AAFH,GAAP;AAMA,CAPD,C,CASA;AACA;;;AACA,OAAO,MAAMS,gBAAgB,GAAG,CAACV,QAAD,EAAWC,QAAX,KAAwB;AACvD,SAAO,MAAOC,QAAP,IAAoB;AAC1B,QAAI;AACH,YAAMP,KAAK,CAACQ,IAAN,CAAY,GAAEL,OAAQ,yBAAtB,EAAgD;AACrDE,QAAAA,QADqD;AAErDC,QAAAA;AAFqD,OAAhD,CAAN;AAIAC,MAAAA,QAAQ,CAACS,kBAAkB,CAACV,QAAD,CAAnB,CAAR;AACA,KAND,CAME,OAAOI,CAAP,EAAU;AACXC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA;AACD,GAVD;AAWA,CAZM,C,CAcP;;AACA,MAAMM,kBAAkB,GAAIV,QAAD,IAAc;AACxC,SAAO;AACNO,IAAAA,IAAI,EAAEX,iBADA;AAENY,IAAAA,OAAO,EAAE;AACRR,MAAAA;AADQ;AAFH,GAAP;AAMA,CAPD;;AASA,OAAO,MAAMW,eAAe,GAAG,MAAOZ,QAAP,IAAoB;AAClD,QAAMa,SAAS,GAAG,MAAMlB,KAAK,CAACmB,GAAN,CAAW,GAAEhB,OAAQ,wBAArB,EAA8C;AACrEiB,IAAAA,MAAM,EAAE;AAAEf,MAAAA;AAAF;AAD6D,GAA9C,CAAxB;AAGA,SAAOa,SAAP;AACA,CALM","sourcesContent":["import axios from \"axios\";\nimport { BOOKMARK_RECIPE, UNBOOKMARK_RECIPE } from \"../components/actionTypes\";\n\nconst API_URL = \"http://localhost:5000\";\n\n// adds bookmarked recipe to database as well as redux state\n// by dispatching action created by bookmarkedRecipe()\nexport const bookmarkRecipe = (username, recipeId) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tawait axios.post(`${API_URL}/users/bookmarkRecipe`, {\n\t\t\t\tusername,\n\t\t\t\trecipeId,\n\t\t\t});\n\t\t\tdispatch(bookmarkedRecipe(recipeId));\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t};\n};\n\n// returns action to be dispatched containing id of recipe to be bookmarked\nconst bookmarkedRecipe = (recipeId) => {\n\treturn {\n\t\ttype: BOOKMARK_RECIPE,\n\t\tpayload: {\n\t\t\trecipeId,\n\t\t},\n\t};\n};\n\n// removes bookmarked recipe from database as well as redux state\n// by dispatching action created by unbookmarkedRecipe()\nexport const unbookmarkRecipe = (username, recipeId) => {\n\treturn async (dispatch) => {\n\t\ttry {\n\t\t\tawait axios.post(`${API_URL}/users/unbookmarkRecipe`, {\n\t\t\t\tusername,\n\t\t\t\trecipeId,\n\t\t\t});\n\t\t\tdispatch(unbookmarkedRecipe(recipeId));\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t};\n};\n\n// returns action to be dispatched containing id of recipe to be unbookmarked\nconst unbookmarkedRecipe = (recipeId) => {\n\treturn {\n\t\ttype: UNBOOKMARK_RECIPE,\n\t\tpayload: {\n\t\t\trecipeId,\n\t\t},\n\t};\n};\n\nexport const getAllBookmarks = async (username) => {\n\tconst bookmarks = await axios.get(`${API_URL}/users/getAllBookmarks`, {\n\t\tparams: { username },\n\t});\n\treturn bookmarks;\n};\n"]},"metadata":{},"sourceType":"module"}